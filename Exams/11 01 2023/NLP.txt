{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Билет 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import re\n",
    "import typing as t\n",
    "from collections import defaultdict\n",
    "from pathlib import Path\n",
    "\n",
    "import matplotlib.animation as animation\n",
    "import matplotlib.pyplot as plt\n",
    "import nltk\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from nltk.corpus import wordnet, stopwords\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @formatter:off\n",
    "%matplotlib inline\n",
    "# @formatter:on"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /Users/demg/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to /Users/demg/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /Users/demg/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package omw-1.4 to /Users/demg/nltk_data...\n",
      "[nltk_data]   Package omw-1.4 is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/demg/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')\n",
    "nltk.download('wordnet')\n",
    "nltk.download('omw-1.4')\n",
    "nltk.download('averaged_perceptron_tagger')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "torch.set_warn_always(True)\n",
    "\n",
    "sns.set_theme()\n",
    "plt.rcParams[\"figure.figsize\"] = (8, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using CPU device\n"
     ]
    }
   ],
   "source": [
    "DATA_DIR = Path(\"../data/\")\n",
    "\n",
    "CUDA = \"cuda\"\n",
    "CPU = \"cpu\"\n",
    "DEVICE = CUDA if torch.cuda.is_available() else CPU\n",
    "print(f\"Using {DEVICE.upper()} device\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 2\n",
    "\n",
    "Реализовав рекуррентную нейронную сеть при помощи библиотеки PyTorch, решите задачу классификации текстов. Разделите набор данных на обучающее и тестовое множество. Проверьте, является ли выборка сбалансированной. При проведении процедуры обучения на несбалансированной выборке задайте параметр weight при создании функции потерь. Отобразите графики значений функции потерь на обучающем множестве. Отобразите confusion matrix и classification report, рассчитанные на основе тестового множества.\n",
    "\n",
    "Датасет: data/nlp/activities.csv\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Предобработка данных и подготовка датасета"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_pos(word: str) -> str:\n",
    "    tag = nltk.pos_tag([word])[0][1]\n",
    "    if tag.startswith(\"J\"):\n",
    "        return wordnet.ADJ\n",
    "    elif tag.startswith(\"V\"):\n",
    "        return wordnet.VERB\n",
    "    elif tag.startswith(\"R\"):\n",
    "        return wordnet.ADV\n",
    "    else:\n",
    "        return wordnet.NOUN\n",
    "\n",
    "\n",
    "_wordnet_lemmatizer = nltk.WordNetLemmatizer()\n",
    "\n",
    "\n",
    "def wordnet_lemmatizer(token: str) -> str:\n",
    "    return _wordnet_lemmatizer.lemmatize(token, pos=get_pos(token))\n",
    "\n",
    "\n",
    "PATTERN = re.compile(r\"[^a-z]\", flags=re.MULTILINE)\n",
    "STOPWORDS = set(stopwords.words(\"english\"))\n",
    "\n",
    "\n",
    "def preprocess_text(\n",
    "        text: str,\n",
    "        lemmatizer_or_stemmer: t.Callable[[str], str] = None,\n",
    "        min_word_len: int = 0,\n",
    ") -> str:\n",
    "    text = text.lower()\n",
    "    text = PATTERN.sub(\" \", text)\n",
    "\n",
    "    words = []\n",
    "    for word in nltk.word_tokenize(text):\n",
    "        if word not in STOPWORDS and len(word) >= min_word_len:\n",
    "            if not lemmatizer_or_stemmer:\n",
    "                words.append(word)\n",
    "                continue\n",
    "            word = lemmatizer_or_stemmer(word)\n",
    "            if word not in STOPWORDS and len(word) >= min_word_len:\n",
    "                words.append(word)\n",
    "\n",
    "    return \" \".join(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ActivitiesVocab:\n",
    "    pad = \"<PAD>\"\n",
    "    unknown = \"<UNK>\"\n",
    "\n",
    "    def __init__(self, texts: t.List[str]):\n",
    "        uniques = set()\n",
    "        max_len = 0\n",
    "        for text in texts:\n",
    "            words = nltk.word_tokenize(text)\n",
    "            uniques.update(words)\n",
    "            max_len = max(len(words), max_len)\n",
    "\n",
    "        self.alphabet = [self.pad, self.unknown, *uniques]\n",
    "        self.max_len = max_len\n",
    "\n",
    "        w2i = {w: i for i, w in enumerate(self.alphabet)}\n",
    "        unknown_idx = w2i[self.unknown]\n",
    "        self.w2i = defaultdict(lambda: unknown_idx, w2i)\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.alphabet)\n",
    "\n",
    "    def encode(self, text: str) -> torch.Tensor:\n",
    "        indices = [self.w2i[w] for w in nltk.word_tokenize(text)]\n",
    "        indices += [self.w2i[self.pad]] * (self.max_len - len(indices))\n",
    "        return torch.tensor(indices, dtype=torch.long)\n",
    "\n",
    "    def decode(self, indices: torch.Tensor) -> str:\n",
    "        pad_indices = torch.nonzero(indices == self.w2i[self.pad], as_tuple=True)[0]  # noqa\n",
    "        if len(pad_indices):\n",
    "            indices = indices[:pad_indices[0]]\n",
    "        return \" \".join(self.alphabet[i] for i in indices)\n",
    "\n",
    "\n",
    "class ActivitiesDataset(Dataset):\n",
    "    df: pd.DataFrame\n",
    "    texts: t.List[str]\n",
    "\n",
    "    encoder: LabelEncoder\n",
    "    classes: t.List[str]\n",
    "\n",
    "    vocab: ActivitiesVocab\n",
    "    data: torch.Tensor\n",
    "    targets: torch.Tensor\n",
    "\n",
    "    def __init__(self, df: pd.DataFrame, vocab: ActivitiesVocab = None, encoder: LabelEncoder = None):\n",
    "        self.df = df\n",
    "\n",
    "        with tqdm(total=len(df)) as pbar:\n",
    "            self._pbar, self._i, self._n = pbar, 0, 100\n",
    "            self.texts = df[\"Text\"].apply(self.preprocess_text).tolist()\n",
    "        self.vocab = vocab or ActivitiesVocab(self.texts)\n",
    "\n",
    "        if encoder:\n",
    "            self.encoder = encoder\n",
    "            encode = self.encoder.transform\n",
    "        else:\n",
    "            self.encoder = LabelEncoder()\n",
    "            encode = self.encoder.fit_transform\n",
    "\n",
    "        self.data = torch.vstack([self.vocab.encode(text) for text in self.texts])\n",
    "        targets = encode(df[\"Review-Activity\"])\n",
    "        self.classes = self.encoder.classes_.tolist()\n",
    "        self.targets = torch.tensor(targets, dtype=torch.long)\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.data.size(0)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.data[idx], self.targets[idx]\n",
    "\n",
    "    def preprocess_text(self, text: str) -> str:\n",
    "        self._i += 1\n",
    "        if self._i % self._n == 0:\n",
    "            self._pbar.update(self._n)\n",
    "        return preprocess_text(text, lemmatizer_or_stemmer=wordnet_lemmatizer, min_word_len=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ACTIVITY    5726\n",
      "REVIEW      4274\n",
      "Name: Review-Activity, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 300x250 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "activities_df = pd.read_csv(DATA_DIR / \"nlp/activities.csv\")\n",
    "vc = activities_df[\"Review-Activity\"].value_counts()\n",
    "print(vc)\n",
    "activities_df[\"Review-Activity\"].value_counts().plot.bar(rot=0, figsize=(3, 2.5));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████| 8000/8000 [00:10<00:00, 747.30it/s]\n",
      "100%|██████████████████████████████████████| 2000/2000 [00:02<00:00, 790.36it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(8000, 2000)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df, test_df = train_test_split(activities_df, test_size=0.2, random_state=0)\n",
    "\n",
    "train_dataset = ActivitiesDataset(train_df)\n",
    "test_dataset = ActivitiesDataset(test_df, vocab=train_dataset.vocab, encoder=train_dataset.encoder)\n",
    "len(train_dataset), len(test_dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Построение и обучение модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_weights(targets: torch.Tensor) -> torch.Tensor:\n",
    "    _, counts = targets.unique(return_counts=True)\n",
    "    return counts.max() / counts\n",
    "\n",
    "\n",
    "def common_train(\n",
    "        model: nn.Module,\n",
    "        loss_fn: nn.Module,\n",
    "        optimizer: optim.Optimizer,\n",
    "        epochs: int,\n",
    "        train_dataloader: DataLoader,\n",
    "        test_dataloader: DataLoader,\n",
    "        verbose: int = None,\n",
    "        device: str = CPU,\n",
    ") -> t.Tuple[t.List[float], t.List[float], t.List[float], t.List[float]]:\n",
    "    train_losses, train_accuracy_list = [], []\n",
    "    test_losses, test_accuracy_list = [], []\n",
    "    for epoch in range(epochs):\n",
    "        print(f\"Epoch {epoch + 1}\\n\" + \"-\" * 32)\n",
    "\n",
    "        train_loss, train_accuracy = train_loop(train_dataloader, model, loss_fn, optimizer, verbose, device)\n",
    "        print(f\"Train Error: loss: {train_loss:.6f}, accuracy: {train_accuracy:.4f}\")\n",
    "        train_losses.append(train_loss)\n",
    "        train_accuracy_list.append(train_accuracy)\n",
    "\n",
    "        test_loss, test_accuracy = test_loop(test_dataloader, model, loss_fn, device)\n",
    "        print(f\" Test Error: loss: {test_loss:.6f}, accuracy: {test_accuracy:.4f}\\n\")\n",
    "        test_losses.append(test_loss)\n",
    "        test_accuracy_list.append(test_accuracy)\n",
    "\n",
    "        torch.cuda.empty_cache()\n",
    "    return train_losses, train_accuracy_list, test_losses, test_accuracy_list\n",
    "\n",
    "\n",
    "def train_loop(\n",
    "        dataloader: DataLoader,\n",
    "        model: nn.Module,\n",
    "        loss_fn: nn.Module,\n",
    "        optimizer: optim.Optimizer,\n",
    "        verbose: int = None,\n",
    "        device: str = CPU,\n",
    ") -> t.Tuple[float, float]:\n",
    "    model.train()\n",
    "\n",
    "    size = len(dataloader.dataset)  # noqa\n",
    "    num_batches = len(dataloader)\n",
    "    avg_loss, avg_accuracy = 0, 0\n",
    "\n",
    "    for batch, (x, y) in enumerate(dataloader):\n",
    "        x, y = x.to(device), y.to(device)\n",
    "\n",
    "        pred = model(x)\n",
    "        loss = loss_fn(pred, y)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        y_true = torch.flatten(y).detach().cpu()\n",
    "        y_pred = torch.flatten(pred.argmax(1)).detach().cpu()\n",
    "        accuracy = metrics.accuracy_score(y_true, y_pred)\n",
    "\n",
    "        avg_loss += loss\n",
    "        avg_accuracy += accuracy\n",
    "        if verbose and batch % verbose == 0:\n",
    "            print(f\"[{batch * len(x):>4d}/{size:>4d}]: loss: {loss:.6f}, accuracy: {accuracy:.4f}\")\n",
    "\n",
    "        del x, y, pred, loss\n",
    "        torch.cuda.empty_cache()\n",
    "\n",
    "    return (avg_loss / num_batches).item(), avg_accuracy / num_batches\n",
    "\n",
    "\n",
    "@torch.no_grad()\n",
    "def test_loop(\n",
    "        dataloader: DataLoader,\n",
    "        model: nn.Module,\n",
    "        loss_fn: nn.Module,\n",
    "        device: str = CPU,\n",
    ") -> t.Tuple[float, float]:\n",
    "    model.eval()\n",
    "    y_true, y_pred = get_y_true_y_pred(model, dataloader, device)\n",
    "    return loss_fn(y_pred, y_true).item(), metrics.accuracy_score(y_true.cpu(), y_pred.argmax(1).cpu())\n",
    "\n",
    "\n",
    "@torch.no_grad()\n",
    "def get_y_true_y_pred(\n",
    "        model: nn.Module,\n",
    "        dataloader: DataLoader,\n",
    "        device: str = CPU,\n",
    ") -> t.Tuple[torch.Tensor, torch.Tensor]:\n",
    "    model.eval()\n",
    "\n",
    "    y_test = []\n",
    "    y_pred = []\n",
    "    for x, y in dataloader:\n",
    "        x, y = x.to(device), y.to(device)\n",
    "        pred = model(x)\n",
    "        y_test.append(y)\n",
    "        y_pred.append(pred)\n",
    "\n",
    "        del x\n",
    "        torch.cuda.empty_cache()\n",
    "\n",
    "    return torch.flatten(torch.vstack(y_test)), torch.vstack(y_pred)\n",
    "\n",
    "\n",
    "def plot_train_test(\n",
    "        train_losses: t.List[float],\n",
    "        train_accuracy: t.List[float],\n",
    "        test_losses: t.List[float],\n",
    "        test_accuracy: t.List[float],\n",
    ") -> None:\n",
    "    fig, axes = plt.subplots(2, 1, figsize=(6, 7))\n",
    "    epochs = torch.arange(len(train_losses))\n",
    "\n",
    "    axes[0].plot(epochs, train_losses)\n",
    "    axes[0].plot(epochs, test_losses)\n",
    "    axes[0].set_ylabel(\"loss\")\n",
    "    axes[0].legend([\"train\", \"test\"])\n",
    "\n",
    "    axes[1].plot(epochs, train_accuracy)\n",
    "    axes[1].plot(epochs, test_accuracy)\n",
    "    axes[1].set_xlabel(\"epoch\")\n",
    "    axes[1].set_ylabel(\"accuracy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ActivitiesRNNClassifier(nn.Module):\n",
    "    _STATE_T = t.Union[t.Optional[torch.Tensor], t.Optional[t.Tuple[torch.Tensor, torch.Tensor]]]\n",
    "    rnn_state: _STATE_T\n",
    "\n",
    "    def __init__(\n",
    "            self,\n",
    "            num_embeddings: int,\n",
    "            embedding_dim: int,\n",
    "            rnn_hidden_size: int,\n",
    "            vector_size: int,\n",
    "            num_classes: int,\n",
    "    ):\n",
    "        super().__init__()\n",
    "        self.embedding = nn.Embedding(num_embeddings=num_embeddings, embedding_dim=embedding_dim, padding_idx=0)\n",
    "        self.rnn = nn.RNN(input_size=embedding_dim, hidden_size=rnn_hidden_size, batch_first=True)\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Linear(rnn_hidden_size * vector_size, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(),\n",
    "            nn.Linear(128, num_classes),\n",
    "        )\n",
    "        self.reset_rnn_state()\n",
    "\n",
    "    def forward(self, x: torch.Tensor) -> torch.Tensor:\n",
    "        x = self.embedding(x)\n",
    "\n",
    "        x, rnn_state = self.rnn(x, self.rnn_state)\n",
    "        self.keep_rnn_state(rnn_state)\n",
    "\n",
    "        x = torch.flatten(x, 1)\n",
    "        return self.classifier(x)\n",
    "\n",
    "    def reset_rnn_state(self):\n",
    "        self.rnn_state = None\n",
    "\n",
    "    def keep_rnn_state(self, state: _STATE_T):\n",
    "        if isinstance(self.rnn, nn.LSTM):\n",
    "            self.rnn_state = (state[0].detach(), state[1].detach())\n",
    "        else:\n",
    "            self.rnn_state = state.detach()\n",
    "\n",
    "    def train(self, mode: bool = True):\n",
    "        self.reset_rnn_state()\n",
    "        return super().train(mode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ActivitiesRNNClassifier(\n",
       "  (embedding): Embedding(15375, 64, padding_idx=0)\n",
       "  (rnn): RNN(64, 64, batch_first=True)\n",
       "  (classifier): Sequential(\n",
       "    (0): Linear(in_features=5568, out_features=128, bias=True)\n",
       "    (1): ReLU()\n",
       "    (2): Dropout(p=0.5, inplace=False)\n",
       "    (3): Linear(in_features=128, out_features=2, bias=True)\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.manual_seed(0)\n",
    "\n",
    "net = ActivitiesRNNClassifier(\n",
    "    num_embeddings=len(train_dataset.vocab),\n",
    "    embedding_dim=64,\n",
    "    rnn_hidden_size=64,\n",
    "    vector_size=train_dataset.vocab.max_len,\n",
    "    num_classes=len(train_dataset.classes),\n",
    ").to(DEVICE)\n",
    "loss_fn = nn.CrossEntropyLoss(weight=get_weights(train_dataset.targets).to(DEVICE))\n",
    "optimizer = optim.Adam(net.parameters(), lr=0.001)\n",
    "\n",
    "train_dataloader = DataLoader(train_dataset, batch_size=128, shuffle=True, drop_last=True)\n",
    "test_dataloader = DataLoader(test_dataset, batch_size=512, drop_last=True)\n",
    "\n",
    "net"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.719097, accuracy: 0.4375\n",
      "[6400/8000]: loss: 0.042422, accuracy: 0.9844\n",
      "Train Error: loss: 0.209760, accuracy: 0.9100\n",
      " Test Error: loss: 0.055843, accuracy: 0.9798\n",
      "\n",
      "Epoch 2\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.082284, accuracy: 0.9766\n",
      "[6400/8000]: loss: 0.010994, accuracy: 1.0000\n",
      "Train Error: loss: 0.045604, accuracy: 0.9853\n",
      " Test Error: loss: 0.042438, accuracy: 0.9863\n",
      "\n",
      "Epoch 3\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.019022, accuracy: 0.9922\n",
      "[6400/8000]: loss: 0.004852, accuracy: 1.0000\n",
      "Train Error: loss: 0.027878, accuracy: 0.9913\n",
      " Test Error: loss: 0.038919, accuracy: 0.9831\n",
      "\n",
      "Epoch 4\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.011165, accuracy: 1.0000\n",
      "[6400/8000]: loss: 0.022750, accuracy: 0.9922\n",
      "Train Error: loss: 0.015585, accuracy: 0.9958\n",
      " Test Error: loss: 0.035973, accuracy: 0.9876\n",
      "\n",
      "Epoch 5\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.010463, accuracy: 1.0000\n",
      "[6400/8000]: loss: 0.009034, accuracy: 1.0000\n",
      "Train Error: loss: 0.008030, accuracy: 0.9979\n",
      " Test Error: loss: 0.036495, accuracy: 0.9883\n",
      "\n",
      "Epoch 6\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.006826, accuracy: 1.0000\n",
      "[6400/8000]: loss: 0.007478, accuracy: 0.9922\n",
      "Train Error: loss: 0.005709, accuracy: 0.9979\n",
      " Test Error: loss: 0.049696, accuracy: 0.9863\n",
      "\n",
      "Epoch 7\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.017423, accuracy: 0.9844\n",
      "[6400/8000]: loss: 0.003233, accuracy: 1.0000\n",
      "Train Error: loss: 0.005900, accuracy: 0.9976\n",
      " Test Error: loss: 0.042707, accuracy: 0.9883\n",
      "\n",
      "Epoch 8\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.001678, accuracy: 1.0000\n",
      "[6400/8000]: loss: 0.000078, accuracy: 1.0000\n",
      "Train Error: loss: 0.002684, accuracy: 0.9989\n",
      " Test Error: loss: 0.042973, accuracy: 0.9909\n",
      "\n",
      "Epoch 9\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.002161, accuracy: 1.0000\n",
      "[6400/8000]: loss: 0.000174, accuracy: 1.0000\n",
      "Train Error: loss: 0.000945, accuracy: 0.9997\n",
      " Test Error: loss: 0.052069, accuracy: 0.9876\n",
      "\n",
      "Epoch 10\n",
      "--------------------------------\n",
      "[   0/8000]: loss: 0.000117, accuracy: 1.0000\n",
      "[6400/8000]: loss: 0.000016, accuracy: 1.0000\n",
      "Train Error: loss: 0.000247, accuracy: 1.0000\n",
      " Test Error: loss: 0.054871, accuracy: 0.9883\n",
      "\n",
      "CPU times: user 14 s, sys: 4.71 s, total: 18.7 s\n",
      "Wall time: 10.3 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "train_losses, train_accuracy, test_losses, test_accuracy = common_train(\n",
    "    epochs=10,\n",
    "    model=net,\n",
    "    loss_fn=loss_fn,\n",
    "    optimizer=optimizer,\n",
    "    train_dataloader=train_dataloader,\n",
    "    test_dataloader=test_dataloader,\n",
    "    verbose=50,\n",
    "    device=DEVICE,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Оценка и выводы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x700 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_train_test(train_losses, train_accuracy, test_losses, test_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_true, y_pred = get_y_true_y_pred(net, test_dataloader, DEVICE)\n",
    "y_true, y_pred = y_true.cpu(), y_pred.argmax(1).cpu()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 350x350 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm_display = metrics.ConfusionMatrixDisplay.from_predictions(\n",
    "    y_true,\n",
    "    y_pred,\n",
    "    display_labels=train_dataset.classes,\n",
    "    colorbar=False,\n",
    "    xticks_rotation=0,\n",
    "    cmap=sns.color_palette('light:b', as_cmap=True)\n",
    ")\n",
    "cm_display.ax_.grid(False)\n",
    "cm_display.figure_.set_size_inches(3.5, 3.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "    ACTIVITY       0.98      1.00      0.99       855\n",
      "      REVIEW       0.99      0.98      0.99       681\n",
      "\n",
      "    accuracy                           0.99      1536\n",
      "   macro avg       0.99      0.99      0.99      1536\n",
      "weighted avg       0.99      0.99      0.99      1536\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(y_true, y_pred, target_names=train_dataset.classes, zero_division=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input:   worth buck someone call book joke agree find book useful even think trading futu...\n",
      "Target:  REVIEW\n",
      "Predict: REVIEW (1.00), ACTIVITY (0.00)\n",
      "\n",
      "Input:   great video nephew love real train kid watch every day without fail sometimes th...\n",
      "Target:  REVIEW\n",
      "Predict: REVIEW (1.00), ACTIVITY (0.00)\n",
      "\n",
      "Input:   bad vacuum cleaner ever bad product ever use pick anything rewind cord nice thin...\n",
      "Target:  REVIEW\n",
      "Predict: REVIEW (1.00), ACTIVITY (0.00)\n",
      "\n",
      "Input:   great anticipate purchase item try mask sound neighbor come stair outside apt ev...\n",
      "Target:  REVIEW\n",
      "Predict: REVIEW (1.00), ACTIVITY (0.00)\n",
      "\n",
      "Input:   camp shoot barbecue\n",
      "Target:  ACTIVITY\n",
      "Predict: ACTIVITY (1.00), REVIEW (0.00)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "net.eval()\n",
    "for i in torch.randperm(len(test_dataset))[:5]:\n",
    "    x, y = test_dataset[i]\n",
    "    x, y = x.to(DEVICE), y.to(DEVICE)\n",
    "    pred = net(x.unsqueeze(0))\n",
    "\n",
    "    pred_proba, pred_label_indices = torch.softmax(pred, 1).topk(min(len(test_dataset.classes), 3), dim=1)\n",
    "    pred_labels = test_dataset.encoder.inverse_transform(pred_label_indices.squeeze().cpu())\n",
    "    predicts = \", \".join([f\"{label} ({prob:.2f})\" for (label, prob) in zip(pred_labels, pred_proba.squeeze())])\n",
    "\n",
    "    text = test_dataset.texts[i]\n",
    "    text = text if len(text) < 80 else text[:80] + \"...\"\n",
    "    target = test_dataset.encoder.inverse_transform([y.cpu()])[0]\n",
    "\n",
    "    print(f\"Input:   {text}\")\n",
    "    print(f\"Target:  {target}\")\n",
    "    print(f\"Predict: {predicts}\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 3\n",
    "\n",
    "При помощи возможностей по автоматическому дифференцированию, которые предоставляет библиотека PyTorch, найдите минимум функции $ y=x^3-x+2 $ на отрезке \\[-10, 10]. Реализуйте процесс поиска экстремума таким образом, чтобы при нахождении точки экстремума процедура поиска останавливалась.  Продемонстрируйте процесс оптимизации. Изобразите график функции y(x) на заданном отрезке."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams[\"figure.figsize\"] = (3.5, 2.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 350x250 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def f(x: torch.Tensor) -> torch.Tensor:\n",
    "    return x ** 3 - x + 2\n",
    "\n",
    "\n",
    "SIGN = -1  # 1 - max, -1 - min\n",
    "\n",
    "START, END = -10, 10\n",
    "EPS = 0.000001\n",
    "LR = 0.001\n",
    "\n",
    "X = torch.arange(START, END + 0.001, 0.001)\n",
    "Y = f(X)\n",
    "plt.plot(X.detach(), Y.detach());"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "SignT = t.Literal[-1, 1]  # 1 - max, -1 - min\n",
    "FuncT = t.Callable[[torch.Tensor], torch.Tensor]\n",
    "\n",
    "\n",
    "def sign_func(func: FuncT, sign: SignT) -> FuncT:\n",
    "    return lambda x: -sign * func(x)\n",
    "\n",
    "\n",
    "def save_animation(xs: t.List[torch.Tensor], path: str, limit: int = 500, delay: int = 30) -> None:\n",
    "    xs_ = xs.copy()\n",
    "    delayed = xs_[-1]\n",
    "    if len(xs_) > limit:\n",
    "        xs_ = xs_[::len(xs_) // limit]\n",
    "    for i in range(delay):\n",
    "        xs_.append(delayed)\n",
    "\n",
    "    with tqdm(total=len(xs_) + 1) as pbar:\n",
    "        def animate(i):\n",
    "            scatter.set_data(xs_[i].detach(), f(xs_[i]).detach())\n",
    "            pbar.update()\n",
    "\n",
    "        fig, ax = plt.subplots(1, 1)\n",
    "        ax.plot(X.detach(), Y.detach())\n",
    "        scatter, = ax.plot([], [], marker=\"o\", color=\"r\")\n",
    "        anim = animation.FuncAnimation(fig, animate, interval=1, frames=len(xs_))\n",
    "        anim.save(path, writer=\"pillow\", fps=20)\n",
    "        plt.close()\n",
    "\n",
    "\n",
    "def answer(x: torch.Tensor, sign: SignT, reason: str) -> None:\n",
    "    extrema = \"минимум\" if sign == -1 else \"максимум\"\n",
    "    if torch.isnan(x):\n",
    "        print(f\"Локальный {extrema} не найден\")\n",
    "    else:\n",
    "        x, y = x.item(), f(x).item()\n",
    "        print(f\"Найден локальный {extrema}: {x=:5f}, f(x)={y:5f}\")\n",
    "        plt.plot(X.detach(), Y.detach())\n",
    "        plt.scatter(x, y, color=\"r\")\n",
    "    print(f\"Причина остановки: {reason}\")\n",
    "\n",
    "\n",
    "def gradient_descent(\n",
    "        func: FuncT,\n",
    "        interval: t.Tuple[float, float],\n",
    "        sign: SignT,\n",
    "        eps: float,\n",
    "        lr: float,\n",
    "        initial_state: float = None,\n",
    ") -> t.Tuple[torch.Tensor, t.List[torch.Tensor], str]:\n",
    "    \"\"\"Градиентный спуск\"\"\"\n",
    "    sign_f = sign_func(func, sign)\n",
    "    start, end = interval\n",
    "    if initial_state is None:\n",
    "        initial_state = random.uniform(start, end)\n",
    "    elif initial_state < start or initial_state > end:\n",
    "        return torch.tensor(torch.nan), [torch.tensor(torch.nan)], \"initial_state вне интервала\"\n",
    "\n",
    "    interval_eps = lr * (end - start)  # наивное расширение границ интервала\n",
    "    adj_start, adj_end = start - interval_eps, end + interval_eps\n",
    "\n",
    "    x = torch.tensor(initial_state, dtype=torch.float, requires_grad=True)\n",
    "    if torch.isnan(sign_f(x)):\n",
    "        return torch.tensor(torch.nan), [torch.tensor(torch.nan)], f\"f(initial_state={initial_state:.4f}) не определена\"\n",
    "\n",
    "    i, n = 0, 1000\n",
    "    with tqdm() as pbar:\n",
    "        xs = []\n",
    "        while True:\n",
    "            xs.append(x.detach().clone())  # выполнится минимум 2 раза\n",
    "\n",
    "            if x < adj_start or x > adj_end:  # вышли за границу дальше дозволенного\n",
    "                # искомый экстремум - предыдущая позиция или одна из границ\n",
    "                start_t, end_t = torch.tensor(start), torch.tensor(end)\n",
    "                if start <= xs[-2] <= end:\n",
    "                    _, x = min((sign_f(xs[-2]), xs[-2]), (sign_f(start_t), start_t), (sign_f(end_t), end_t))\n",
    "                else:\n",
    "                    _, x = min((sign_f(start_t), start_t), (sign_f(end_t), end_t))\n",
    "                xs.append(x.detach().clone())\n",
    "                return xs[-1], xs, \"выход за границы интервала\"\n",
    "\n",
    "            y = sign_f(x)\n",
    "            if torch.isnan(y):\n",
    "                xs.pop()\n",
    "                return xs[-1], xs, f\"функция для следующего x={x.item():.4f} не определена\"\n",
    "\n",
    "            # а эти 3 строчки про \"возможности по автоматическому дифференцированию, которые предоставляет PyTorch\"\n",
    "            y.backward()\n",
    "            grad = x.grad.clone()\n",
    "            x.grad.zero_()\n",
    "\n",
    "            with torch.no_grad():\n",
    "                x -= lr * grad  # ладно, это 4-ая\n",
    "                if torch.abs(x - xs[-1]) <= eps:  # найден экстремум с необходимой точностью\n",
    "                    xs.append(x.detach().clone())\n",
    "                    return xs[-1], xs, \"найден экстремум\"\n",
    "\n",
    "            if i % n == 0:\n",
    "                pbar.update(n)\n",
    "            i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "3000it [00:00, 21108.76it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Найден локальный минимум: x=0.577632, f(x)=1.615100\n",
      "Причина остановки: найден экстремум\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 350x250 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, xs, reason = gradient_descent(func=f, interval=(START, END), sign=SIGN, eps=EPS, lr=LR, initial_state=9.1)\n",
    "answer(x, SIGN, reason)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████████| 621/621 [00:10<00:00, 61.70it/s]\n"
     ]
    }
   ],
   "source": [
    "save_animation(xs, \"autograd_1.gif\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](autograd_1.gif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "1000it [00:00, 400449.11it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Найден локальный минимум: x=-10.000000, f(x)=-988.000000\n",
      "Причина остановки: выход за границы интервала\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 350x250 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, xs, reason = gradient_descent(func=f, interval=(START, END), sign=SIGN, eps=EPS, lr=LR, initial_state=-6)\n",
    "answer(x, SIGN, reason)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████| 56/56 [00:01<00:00, 50.92it/s]\n"
     ]
    }
   ],
   "source": [
    "save_animation(xs, \"autograd_2.gif\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](autograd_2.gif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
